@page "/todolist"
@using BlazorToDoListServer.Model;

<PageTitle>To Do List</PageTitle>
<div class="container mt-3">
	<h3 class="text-center">Blazor To Do List! You have @todos.Count(todo => !todo.IsDone) tasks to do...</h3>

	<div class="input-group mt-5">
		<div class="col-10">
			<input placeholder="Something todo..." class="form-control" @bind="newTodo" />
		</div>
		<button @onclick="AddTodo" class="col-2 btn btn-primary"><i class="bi bi-plus-circle"></i></button>
	</div>
</div>


<ul class="container mt-3">
	@foreach (var todo in todos)
	{
		<li class="input-group mb-3 col-10">
			<div class="input-group-text">
				<input class="form-check-input mt-0" type="checkbox" @bind="todo.IsDone" aria-label="Checkbox for following text input">
			</div>
			@if (todo.IsDone)
			{
				<input type="text" class="form-control" disabled aria-label="Text input with checkbox" @bind="todo.Title">
			} else 
			{
				<input type="text" class="form-control" aria-label="Text input with checkbox" @bind="todo.Title">
			}
			<button  @onclick="(() => Delete(todo))" class="col-2 btn btn-danger"><i class="bi bi-trash3-fill"></i></button>
		</li>
		
	}
</ul>


@code {
	private List<TodoItem> todos = new();
	private string? newTodo;

	private void AddTodo()
	{
		todos.Add(
			new TodoItem 
			{ 
				Title = newTodo, IsDone = false, DateTime = DateTime.Now
			});

		todos.Sort(
			delegate(TodoItem a, TodoItem b)
			{ 
				return b.DateTime.CompareTo(a.DateTime); 
			});

		newTodo = string.Empty;
	}

	private void Delete(TodoItem task)
	{
		todos.Remove(task);
	}
}
